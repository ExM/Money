<#@ template language="C#" hostspecific="True" Debug="true"
#><#@ assembly name="System.Core" 
#><#@ import namespace="System" 
#><#@ import namespace="System.Collections.Generic" 
#><#@ import namespace="System.IO" 
#><#@ import namespace="System.Linq" 
#><#@ include file="..\..\T4Templates\Iso4217table.ttinclude"
#><#
	var xmlEntries = XmlCurrencyEntries.Load(Host.ResolvePath("../../doc/table_a1.xml"));
	var symbols = CurrencySymbols.Load(Host.ResolvePath("../../doc/unicodeSymbols.csv"));
	var codes = xmlEntries.List.Where(_ => _.Code != null).Select(_ => _.Code).Distinct().ToList();

	SortedList<int, string> numCodes = new SortedList<int, string>();
#>
using System;
using System.Collections.Generic;

namespace AbbyyLS.Payments
{
	public static partial class Iso4217
	{
<#
		foreach(var xmlEntry in xmlEntries.List.Where(_ => _.Code != null).Distinct().OrderBy(_ => _.Code))
		{
			if(xmlEntry.NumCode > 0)
				numCodes.Add(xmlEntry.NumCode, xmlEntry.Code);
			
		#>		/// <summary>
		/// <#= xmlEntry.Name #>
		/// </summary>
		public static readonly ICurrency <#= xmlEntry.Code #> = new Iso4217Currency("<#= xmlEntry.Code #>", "<#= symbols.Get(xmlEntry.Code) #>", <#= xmlEntry.NumCode #>, <#= xmlEntry.MinorUnit #>);
<# } #>
		
		/// <summary>
		/// Parse char code of currency in ISO4217
		/// </summary>
		/// <param name="charCode">
		/// char code of currency
		/// </param>
		/// <returns>
		/// null if not found<see cref="ICurrency"/>
		/// </returns>
		public static ICurrency TryParse(string charCode)
		{
			switch(charCode.ToUpperInvariant())
			{
<# foreach(string code in codes) {
#>				case "<#= code #>": return <#= code #>;
<# } #>
				default: return null;
			}
		}
		
		/// <summary>
		/// Parse number code of currency in ISO4217
		/// </summary>
		/// <param name="numCode">
		/// number code of currency
		/// </param>
		/// <returns>
		/// null if not found<see cref="ICurrency"/>
		/// </returns>
		public static ICurrency TryParse(int numCode)
		{
			switch(numCode)
			{
<# foreach(var pair in numCodes) {
#>				case <#= pair.Key #>: return <#= pair.Value #>;
<# } #>
				default: return null;
			}
		}

		/// <summary>
		/// Get all support currencies
		/// </summary>
		public static IEnumerable<ICurrency> GetAll()
		{
<# foreach(string code in codes) {
#>			yield return <#= code #>;
<# } #>		}
	}
}
