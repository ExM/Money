<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Collections.Generic" #>
<#+

	public class CurrencySymbols
	{
		private Dictionary<string, string> _map;

		public static CurrencySymbols Load(string csvFile)
		{
			var result = new CurrencySymbols();

			result._map = new Dictionary<string, string>();

			foreach(string line in File.ReadAllLines(csvFile).Skip(1))
			{
				string[] cells = line.Split(';');
				string code = cells[0];
				string symbol = "";
				foreach(string ch in cells[1].Split(','))
				{
					if(ch.Length == 2)
						symbol += ((char)Convert.ToInt32(ch, 16)).ToString();
					else if(ch.Length == 3)
						symbol += "\\u0" + ch;
					else
						symbol += "\\u" + ch;
				}
				result._map.Add(code, symbol);
			}

			return result;
		}

		public string Get(string code)
		{
			string result;
			if(_map.TryGetValue(code, out result))
				return result;

			return "¤";
		}
	}
	
	[XmlRoot("ISO_4217")]
	public class XmlCurrencyEntries
	{
		public static XmlCurrencyEntries Load(string tableFile)
		{
			var serializer = new XmlSerializer(typeof(XmlCurrencyEntries));

			using(var reader = new StreamReader(tableFile))
				return (XmlCurrencyEntries)serializer.Deserialize(reader);
		}
		
		[XmlAttribute("Pblshd")]
		public string PublishDate {get; set;}


		[XmlArray("CcyTbl"), XmlArrayItem("CcyNtry")]
		public List<XmlCurrencyEntry> List { get; set; }
	}

	public class XmlCurrencyEntry: IEquatable<XmlCurrencyEntry>, IEqualityComparer<XmlCurrencyEntry>
	{
		[XmlElement("CtryNm")]
		public string Country { get; set; }

		[XmlElement("Ccy")]
		public string Code { get; set; }

		[XmlElement("CcyNbr")]
		public int NumCode { get; set; }

		[XmlElement("CcyNm")]
		public string Name { get; set; }

		[XmlElement("CcyMnrUnts")]
		public string xmlMinorUnit { get; set; }

		public string MinorUnit
		{
			get
			{
				switch(xmlMinorUnit)
				{
					case "N.A.": return "0m";
					case "0": return "1m";
					case "1": return "0.1m";
					case "2": return "0.01m";
					case "3": return "0.001m";
					case "4": return "0.0001m";
					default:
						throw new NotSupportedException("unexpected value: " + xmlMinorUnit);
				}
			}
		}

		public bool Equals(XmlCurrencyEntry other)
		{
			return Code == other.Code;
		}

		public bool Equals(XmlCurrencyEntry x, XmlCurrencyEntry y)
		{
			return x.Code == y.Code;
		}

		public int GetHashCode(XmlCurrencyEntry obj)
		{
			return obj.GetHashCode();
		}

		public override int GetHashCode()
		{
			return Code.GetHashCode();
		}
	}
#>

